apiVersion: v1
kind: ServiceAccount
metadata:
  name: lamassu-ca-service-account
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: lamassu-ca-role
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: lamassu-ca-rolebinding
  namespace: default 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: lamassu-ca-role 
subjects:
- namespace: default 
  kind: ServiceAccount
  name: lamassu-ca-service-account
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: lamassu-ca-cert
  namespace: default
spec:
  isCA: false
  commonName: lamassu-ca
  dnsNames:
    - "lamassu-ca"
  secretName: lamassu-ca-cert-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: lamassu-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: lamassu-ca-initcontainer-cm
  namespace: default
data:
  init.sh: |
    echo "Initializing ..."
    apt-get update
    apt-get install curl jq -y

    # Check if Vault is healthy
    successful_vault_health="false"
    while [ $successful_vault_health == "false" ]; do
        echo "Vault HCheck"
        vault_status=$(curl --silent -k https://vault:8200/v1/sys/health)
        echo "Vault HCheck done"
        if jq -e . >/dev/null 2>&1 <<<"$vault_status"; then #Check if reload_status is json string
            echo $vault_status
            successful_vault_health="true"
        else 
            sleep 5s
        fi
    done

    echo "Vault HCheck pass"
  
    isVaultInitialized=$(curl -k https://vault:8200/v1/sys/init | jq -r .initialized)
    echo $isVaultInitialized

    if [ "isVaultInitialized" == "true" ]; then 
      echo "Vault already initialized. Existing with succesfull code"
      exit 0
    fi

    echo "Vault is healthy but requires initizalization. Initialazing ...."

    vault_credentials_raw=$(curl --request POST --data '{"secret_shares": 10,"secret_threshold": 5}' -k https://vault:8200/v1/sys/init)
    vault_credentials_base64=$(echo $vault_credentials_raw | base64 --wrap=0)

    echo $vault_credentials_raw
    echo
    echo $vault_credentials_base64

    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt

    echo "Before secret creation"

    curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -X POST ${APISERVER}/api/v1/namespaces/default/secrets \
      --data "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"name\":\"vault-credentials-file\"},\"type\":\"Opaque\",\"data\":{\"json-file.json\":\"$vault_credentials_base64\"}}"

    echo "Post secret creation"
    
    echo "Vault Credentials File persisted into kubernetes secret."
    echo "Provisioning vault: "

    echo "$vault_credentials_raw" | jq '.'
 
    VAULT_TOKEN=$(echo $vault_credentials_raw | jq -r .root_token) 
    
    # Introduciendo keys para unseal
    curl --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[0])\" }"
    curl --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[1])\" }"
    curl --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[2])\" }"
    curl --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[3])\" }"
    curl --request PUT "https://vault:8200/v1/sys/unseal" -k --header 'Content-Type: application/json' --data-raw "{\"key\": \"$(echo $vault_credentials_raw | jq -r .keys[4])\" }"
   
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"type": "approle"}' "https://vault:8200/v1/sys/auth/approle"
    
    tee payload.json <<EOF
    {
      "type": "pki",
      "config": {
        "max_lease_ttl": "262800h"
      }
    } 
    EOF
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256"
   
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json "https://vault:8200/v1/sys/mounts/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policy":"path \"sys/mounts/*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\npath \"sys/mounts\" {\n capabilities=[\"read\"]\n}\npath \"sys/policies/*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\npath \"pki/lamassu/dev*\" {\n capabilities=[\"read\", \"create\", \"update\", \"delete\", \"list\", \"sudo\"]\n}"}' "https://vault:8200/v1/sys/policy/lamassu-ca-policy"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policy":"path \"Lamassu-Root-CA1-RSA4096/cert/ca\" {\n capabilities=[\"read\"]\n}\npath \"Lamassu-Root-CA2-RSA2048/cert/ca\" {\n capabilities=[\"read\"]\n}\n path \"Lamassu-Root-CA3-ECC384/cert/ca\" {\n capabilities=[\"read\"]\n}\npath \"Lamassu-Root-CA4-ECC256/cert/ca\" {\n capabilities=[\"read\"]\n}"}' "https://vault:8200/v1/sys/policy/ocsp-policy"
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policies": "lamassu-ca-policy"}' "https://vault:8200/v1/auth/approle/role/lamassu-ca-role"
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data '{"policies": "ocsp-policy"}' "https://vault:8200/v1/auth/approle/role/ocsp-role"

    tee enroller.json <<EOF
    {
      "allow_any_name": true,
      "ttl": "175200h",
      "max_ttl": "262800h",
      "key_type": "any"
    } 
    EOF
    
    tee internal.json <<EOF
    {
      "common_name": "LKS Next Root <CA_name>",
      "key_type": "rsa",
      "key_bits": "<key_bits>",
      "organization": "LKS Next, S. Coop",
      "country": "ES",
      "ttl": "262800h",
      "province": "Gipuzkoa",
      "locality": "Arrasate"
    } 
    EOF
    
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 1"' | jq '.key_bits="4096"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA1-RSA4096/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 2"' | jq '.key_bits="2048"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA2-RSA2048/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 3"' | jq '.key_bits="384"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA3-ECC384/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256/roles/enroller"
    cat internal.json | jq '.common_name="LKS Next Root CA 4"' | jq '.key_bits="256"' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json "https://vault:8200/v1/pki/lamassu/dev/_pki/Lamassu-Root-CA4-ECC256/root/generate/internal"

    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @enroller.json "https://vault:8200/v1/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller/roles/enroller"
    cat internal.json | jq '.common_name="Lamassu DMS Enroller"' | jq '.key_bits="4096"' | jq '.organization="Lamassu PKI"' | jq '.country=""' | jq '.province=""' | jq '.locality=""' > internal_CA.json
    curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --data @internal_CA.json "https://vault:8200/v1/pki/lamassu/dev/_internal/Lamassu-DMS-Enroller/root/generate/internal"

    # rm payload.json enroller.json internal.json internal_CA.json

    CA_VAULT_ROLEID=$(curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" https://vault:8200/v1/auth/approle/role/lamassu-ca-role/role-id | jq -r .data.role_id | sed 's/\\n/\n/g' | sed -Ez '$ s/\n+$//' | base64)
    echo $CA_VAULT_ROLEID
    CA_VAULT_SECRETID=$(curl -k --header "X-Vault-Token: ${VAULT_TOKEN}" --request POST https://vault:8200/v1/auth/approle/role/lamassu-ca-role/secret-id  | jq -r .data.secret_id | sed 's/\\n/\n/g' | sed -Ez '$ s/\n+$//' | base64)
    echo $CA_VAULT_SECRETID

    curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -H "Content-Type: application/json" -X POST ${APISERVER}/api/v1/namespaces/default/secrets \
      --data "{\"apiVersion\":\"v1\",\"kind\":\"Secret\",\"metadata\":{\"name\":\"lamassu-ca-vault-credentials\"},\"type\":\"Opaque\",\"data\":{\"role-id\":\"$CA_VAULT_ROLEID\", \"secret-id\":\"$CA_VAULT_SECRETID\"}}"

    echo -e "\nEl valor de VAULT_TOKEN es $VAULT_TOKEN"
    # echo HASTA AQUI
    # sleep 100000s
---
apiVersion: apps/v1
kind: Deployment
metadata:  
  name: lamassu-ca-deployment
  namespace: default
  labels:
    app: lamassu-ca
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lamassu-ca
  template:
    metadata:
      labels:
        app: lamassu-ca
    spec:
      serviceAccountName: lamassu-ca-service-account
      initContainers:
        - name: vault-initializer
          image: ubuntu:20.04
          volumeMounts:
            - name: initcontainer-cmd
              mountPath: /templates/init.sh
              subPath: init.sh
          command: ["/bin/bash", "-c"]
          args: ["cp /templates/init.sh /init.sh && chmod +x /init.sh && bash /init.sh" ]
      containers:
        - name: lamassu-ca
          image: lamassuiot/lamassu-ca:v1.0.16
          env:
            # - name: PORT
            #   value: "8087"
            # - name: PROTOCOL
            #   value: https
            # - name: OCSP_URL
            #   value: https://lamassu-ocsp:9098
            # - name: VAULT_ADDRESS
            #   value: https://vault:8200
            # - name: VAULT_ROLE_ID
            #   valueFrom:
            #     secretKeyRef:
            #       name: lamassu-ca-vault-credentials
            #       key: role-id
            # - name: VAULT_SECRET_ID
            #   valueFrom:
            #     secretKeyRef:
            #       name: lamassu-ca-vault-credentials
            #       key: secret-id
            # - name: VAULT_UNSEAL_KEYS_FILE
            #   value: /config/vault-credentials.json
            # - name: VAULT_PKI_CA_PATH
            #   value: pki/lamassu/dev/
            # - name: AMQP_IP
            #   value: rabbitmq
            # - name: AMQP_PORT
            #   value: "5671"
            # - name: AMQP_SERVER_CA_CERT_FILE
            #   value: /certs/internal-ca.crt
            # - name: OPENAPI_ENABLE_SECURITY_SCHEMA
            #   value: "true"
            # - name: JAEGER_SERVICE_NAME
            #   value: lamassu-ca
            # - name: JAEGER_AGENT_HOST
            #   value: jaeger
            # - name: JAEGER_AGENT_PORT
            #   value: "6831"
            # - name: JAEGER_SAMPLER_TYPE
            #   value: const
            # - name: JAEGER_SAMPLER_PARAM
            #   value: "1"
            # - name: JAEGER_REPORTER_LOG_SPANS
            #   value: "false"
            # - name: VAULT_CA
            #   value: /certs/vault.crt
            # - name: MUTMUTUAL_TLS_ENABLED
            #   value: "true"
            # - name: MUTUAL_TLS_CLIENT_CA
            #   value: /certs/internal-ca.crt
            # - name: CERT_FILE
            #   value: /certs/tls.crt
            # - name: KEY_FILE
            #   value: /certs/tls.key
            # - name: OPENAPI_SECURITY_OIDC_WELL_KNOWN_URL
            #   value: https://auth.${DOMAIN}/auth/realms/lamassu/.well-known/openid-configuration              
          volumeMounts:
            # - name: lamassu-ca-json-config
            #   mountPath: /config/vault-credentials.json
            #   subPath: json-file.json

            - name: lamassu-ca-tls-certificates
              mountPath: /certs/vault.crt
              subPath: ca.crt

            - name: lamassu-ca-tls-certificates
              mountPath: /certs/tls.crt
              subPath: tls.crt

            - name: lamassu-ca-tls-certificates
              mountPath: /certs/tls.key
              subPath: tls.key

            - name: lamassu-ca-tls-certificates
              mountPath: /certs/internal-ca.crt
              subPath: ca.crt
          ports:
            - containerPort: 8087
      restartPolicy: Always
      volumes:
        - name: initcontainer-cmd
          configMap:  
            name: lamassu-ca-initcontainer-cm

        - name: lamassu-ca-json-config
          secret:
            secretName: vault-credentials-file

        - name: lamassu-ca-tls-certificates
          secret:
            secretName: lamassu-ca-cert-secret