apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dms-default-tls-cert
  namespace: {{.Release.Namespace}}
spec:
  isCA: false
  commonName: dms-default
  dnsNames:
    - "dms-default"
  secretName: dms-default-tls-cert-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: lamassu-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: dms-default-dms-cert
  namespace: {{.Release.Namespace}}
spec:
  isCA: false
  commonName: dms-default
  dnsNames:
    - "dms-default"
  secretName: dms-default-dms-cert-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: lamassu-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dms-cm
  namespace: {{.Release.Namespace}}
data:
  index.js: |
    const https = require("https");
    const util = require("util");
    const fs = require('fs');
    const exec = util.promisify(require("child_process").exec);

    const options = {
      key: fs.readFileSync('/app/https.key'),
      cert: fs.readFileSync('/app/https.crt')
    };

    const execCmd = async (cmd) => {
      try{
        exec_res = await exec(cmd);
        if (exec_res.error == null) {
          return 0 
        } else {
          console.log(exec_res.error);
          return -1
        }
      } catch (er){
        console.log(er);
        return -1
      }
    }


    const server = https.createServer(options, async (req, res) => {
      res.setHeader("Access-Control-Allow-Origin", "*")
      
      
      if (req.url.startsWith("/dms-renew/") && req.method === "POST") {
        console.log(req.url);
        const deviceId = req.url.split("/dms-renew/")[1]
        console.log(deviceId);
        const CMD_ENROLL = 'estclient reenroll -server dev.lamassu.io:9998 -explicit /app/device-manager-anchor.crt -csr /app/devices-crypto-material/device-'+deviceId+'.csr -out /app/devices-crypto-material/device-reenrolled-'+deviceId+'.crt -certs /app/devices-crypto-material/device-'+deviceId+'.crt -key /app/devices-crypto-material/device-'+deviceId+'.key' ;
        if (await execCmd(CMD_ENROLL) == 0) {
          res.writeHead(200, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ message: "Executed correctly" }));
        } else {
          res.writeHead(500, { "Content-Type": "application/json" });
          res.end(JSON.stringify({ message: "Internal server error" }));
        }

      } else if (req.url.startsWith("/dms-issue/csr/") && req.method === "POST") {
        const cn_aps = req.url.split("/dms-issue/csr/")[1]
        const cn=cn_aps.split("/")[0]
        const aps=cn_aps.split("/")[1]

        const chunks = [];
        req.on('data', chunk => chunks.push(chunk));
        req.on('end', async () => {
          const data = Buffer.concat(chunks).toString("utf-8");

          fs.writeFileSync('/app/devices-crypto-material/device-'+cn+'.csr', data)
          const CMD_ENROLL = 'estclient enroll -server dev.lamassu.io:9998 -explicit /app/device-manager-anchor.crt -csr /app/devices-crypto-material/device-'+cn+'.csr -out /app/devices-crypto-material/device-'+cn+'.crt -aps ' + aps + ' -certs /app/enrolled-dms.crt -key /app/enrolled-dms.key' ;
          console.log(CMD_ENROLL);
          if (await execCmd(CMD_ENROLL) == 0) {
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({ message: "Executed correctly" }));
          } else {
            res.writeHead(500, { "Content-Type": "application/json" });
            res.end(JSON.stringify({ message: "Internal server error" }));
          }
        })
        
      } else if (req.url.startsWith("/dms-issue/") && req.method === "POST") {
        const chunks = [];
        req.on('data', chunk => chunks.push(chunk));
        req.on('end', async () => {
          const data = JSON.parse(Buffer.concat(chunks).toString("utf-8"));

          const cn_aps = req.url.split("/dms-issue/")[1]
          const cn=cn_aps.split("/")[0]
          const aps=cn_aps.split("/")[1]

          const c = data.c ? data.c : ""
          const st = data.st ? data.st : ""
          const l = data.l ? data.l : ""
          const o = data.o ? data.o : ""
          const ou = data.ou ? data.ou : ""

          var CMD_GEN_CSR
          if (data.key_type == "ec") {
            eccAlg="";
            switch (data.key_bits) {
                    case 256:
                            eccAlg="prime256v1";
                            break;
                    case 384:
                            eccAlg="secp384r1";
                            break;
                    case 224:
                            eccAlg="secp224r1";
                            break;
                    default:
                            eccAlg="UNKNOWN";
                            break;
            }

            CMD_GEN_CSR = 'openssl req -nodes -newkey ec -pkeyopt ec_paramgen_curve:'+ eccAlg +' -keyout /app/devices-crypto-material/device-'+cn+'.key -out /app/devices-crypto-material/device-'+cn+'.csr -subj "/C=' + c +'/ST=' + st +'/L=' + l +'/O=' + o +'/OU=' + ou +'/CN='+cn+'"'
          }else{
            // CMD_GEN_CSR = 'openssl req -nodes -newkey rsa:' + data.key_bits +' -keyout /app/devices-crypto-material/device-'+cn+'.key -out /app/devices-crypto-material/device-'+cn+'.csr -subj "/C=' + c +'/ST=' + st +'/L=' + l +'/O=' + o +'/OU=' + ou +'/CN='+cn+'"'
            CMD_GEN_CSR = 'openssl req -nodes -newkey rsa:' + data.key_bits +' -keyout /app/devices-crypto-material/device-'+cn+'.key -out /app/devices-crypto-material/device-'+cn+'.csr -subj "/CN='+cn+'"'
          }

          console.log(CMD_GEN_CSR);
          
          if (await execCmd(CMD_GEN_CSR) == -1) {
            res.writeHead(500, { "Content-Type": "application/json" });
            res.end(JSON.stringify({ message: "Executed correctly" }));
          }else{
            const CMD_ENROLL = 'estclient enroll -server dev.lamassu.io:9998 -explicit /app/device-manager-anchor.crt -csr /app/devices-crypto-material/device-'+cn+'.csr -out /app/devices-crypto-material/device-'+cn+'.crt -aps ' + aps + ' -certs /app/enrolled-dms.crt -key /app/enrolled-dms.key' ;
            console.log(CMD_ENROLL);
            if (await execCmd(CMD_ENROLL) == 0) {
              res.writeHead(200, { "Content-Type": "application/json" });
              res.end(JSON.stringify({ message: "Executed correctly" }));
            } else {
              res.writeHead(500, { "Content-Type": "application/json" });
              res.end(JSON.stringify({ message: "Internal server error" }));
            }
          }
        })


      } else {
        res.writeHead(404, { "Content-Type": "application/json" });
        res.end(JSON.stringify({ message: "Route not found" }));
      }
    });

    const PORT = process.env.PORT || 5000;
    server.listen(PORT, () => console.log(`Server running on port ${PORT}`));

---
apiVersion: apps/v1
kind: Deployment
metadata:  
  name: dms-default-deployment
  namespace: {{.Release.Namespace}}
  labels:
    app: dms-default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dms-default
  template:
    metadata:
      labels:
        app: dms-default
    spec:     
      containers:
        - name: dms-default
          # image: 
          env:
            - name: PORT
              value: "5000"
            - name: DOMAIN
              value: {{.Values.Domain}}            
          volumeMounts:
            - name: dms-config
              mountPath: /app/index.js
              subPath: index.js
            - name: dms-default-down-tls-certificates
              mountPath: device-manager-anchor.crt
              subPath: tls.crt
            # - name: dms-default-dms-certificates
            #   mountPath: /app/enrolled-dms.crt
            #   subPath: dms.crt
            # - name: dms-default-dms-certificates
            #   mountPath: /app/enrolled-dms.key
            #   subPath: dms.key
            - name: dms-default-tls-certificates
              mountPath: /app/device-manager-anchor.crt
              subPath: tls.crt
            - name: dms-default-tls-certificates
              mountPath: /app/https.crt
              subPath: tls.crt
            - name: dms-default-tls-certificates
              mountPath: /app/https.key
              subPath: tls.key

          ports:
            - containerPort: 5000
      restartPolicy: Always
      volumes:
        - name: dms-config
          configMap:  
            name: dms-cm
        - name: dms-default-down-tls-certificates
          secret:
            secretName: downstream-crt-secret
        # - name: dms-default-dms-certificates
        #   secret:
        #     secretName: dms-default-dms-cert-secret
        - name: dms-default-tls-certificates
          secret:
            secretName: dms-default-tls-cert-secret
---
apiVersion: v1
kind: Service
metadata:
  name: dms-default
  namespace: {{.Release.Namespace}}
spec:
  selector:
    app: dms-default
  type: ClusterIP
  ports:
  - name: dms-default-https
    port: 5000
    targetPort: 5000 
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dms-default-ingress
  namespace: {{.Release.Namespace}}
  annotations: 
    cert-manager.io/issuer: "lamassu-ca-issuer"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - {{.Values.Domain}}
    secretName: downstream-crt-secret
  rules:
  - host: {{.Values.Domain}}
    http: 
      paths:
      - pathType: Prefix
        path: /
        backend: 
          service: 
            name: "dms-default-https"
            port:
              number: 5000